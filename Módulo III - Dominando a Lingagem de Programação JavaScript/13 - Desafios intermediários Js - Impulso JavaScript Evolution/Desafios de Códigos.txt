desafios codados na própria plataforma DIO


/*---------- DESAFIO-01 ----------*/

O objetivo deste desafio é resolvê-lo utilizando o seu conhecimento sobre Arrays, uma estrutura de dados que armazena uma coleção de dados 
em um bloco de memória.

Dado uma array de valores {2, 3, 5, 7, 11, 13, 18, 34}, desenvolva um programa que retorne como resultado apenas os números pares dessa array, 
conforme exemplo abaixo.

 

Exemplo 1:

Entrada                            Saída
2, 3, 5, 7, 11, 13, 18, 34	   2
				   18
				   34


// a função gets é implementada dentro do sistema para ler as entradas(inputs) dos dados e a função print para imprimir a saída (output) de dados e 
// já pula uma linha ("\n")
// Abaixo segue um exemplo de código que você pode ou não utilizar

var array = [ 2, 3, 5, 7, 11, 13, 18, 34 ];

//TODO: Complete os espaços em branco com uma possível solução para o desafio
 
for (let i = 0; i < array.length; i++){
    if (array[i] % 2 === 0){
        print(array[i]);
     }          
}



/*---------- DESAFIO-02 ----------*/


O Réveillon é uma das festas mais esperadas do hotel Copacabana Palace. Mesmo sendo restrito para um seleto grupo de pessoas, o salão fica abarrotado 
de gente e muitas vezes os garçons não dão conta de atender a todos da mesma maneira. 

Os convidados que sentam nas pontas das mesas são os privilegiados, pois são atendidos com somente um pedido, mas os demais precisam sempre pedir 
duas vezes, pois os garçons não conseguem dar a mesma atenção a eles. Além disso, há uma superstição de entrada de ano que diz que, se não houver 
um número par de pessoas que não sentam nas pontas, o próximo ano será um desastre.

Portanto, sua tarefa é determinar a soma da quantidade de pedidos de cada um para saber se vale a pena ir ao Réveillon de Copacabana ou se é melhor 
ficar em casa e assistir ao Show da Virada.

Entrada
A entrada é composta por T (1 ≤ T ≤ 100) indicando a quantidade de casos de teste e então, T inteiros N (3 ≤ N ≤ 104), indicando a quantidade de 
pessoas.A mesa é retangular e haverá pelo menos e no máximo uma pessoa em uma das pontas, isto é, se uma ponta estiver vazia, a outra deve ser ocupada, 
ou senão, as duas pontas estarão ocupadas, mas o número de pessoas que não estão nas pontas sempre será par. O final da entrada é indicado por T = 0.

Saída
Seu programa deverá imprimir a soma da quantidade de pedidos de cada pessoa. Não haverá linha em branco entre os casos de teste.

Exemplo de Entrada	Exemplo de Saída

5			25
13			73
37			97
49			21
11			17
9			9
2			33
5
17
0


// a função gets() é implementada dentro do sistema para ler as entradas(inputs) dos dados e a função print() para imprimir a saída (output) de dados e já pula uma linha ("\n")
// Abaixo segue um exemplo de código que você pode ou não utilizar

let T = parseInt(gets());
let N;

//TODO: Complete os espaços em branco com uma possível solução para o desafio

    	while (T !== 0) {
    	  
    		for (let i = 1; i <= T; i++) {
    			N = parseInt(gets());
    			if (N % 2 !== 0)
				 print( ((N-1)*2)+1 );
    			else 
				print( ((N-2)*2)+2 );
    		}
    		
    		T = parseInt(gets());
    	}




/*---------- DESAFIO-03 ----------*/

Todos os habitantes do Mundo Mágico estão super animados com a abertura do Dragão Berrador World, o mais novo parque de diversões do universo bruxo. 
Infelizmente foram impostas algumas restrições no momento da homologação do brinquedo pelo Ministério Bruxo. Por questões de segurança, há uma altura 
mínima e uma altura máxima que as pessoam devem ter para poder passear na montanha-russa.

Para o dia da inauguração do parque, todos os convidados realizaram um pré-cadastro no qual indicaram sua altura. Para reduzir filas e otimizar a 
operação do parque no primeiro dia, você foi contratado pela gerência do Dragão Berrador World para fazer um programa que, dado o número de visitantes, 
altura mínima, altura máxima e as alturas de todos os visitantes, calcule quantas pessoas poderão andar na montanha-russa.

Entrada
A entrada contém vários casos de teste. A primeira linha de cada caso consiste em três inteiros N (1 ≤ N ≤ 100), Amin e Amax (50 ≤ Amin ≤ Amax ≤ 250), 
o número de visitantes, a altura mínima e máxima em centímetros para andar na montanha-russa, respectivamente.

As N linhas seguintes contém, cada uma, um número inteiro representando a altura do visitantes, em centímetros.

Saída
Para cada caso de teste, imprima uma única linha com o número visitantes que podem passear na montanha-russa.


Exemplo de Entrada	Exemplo de Saída
8 160 182		5
160
182
183
159
250
170
172
173

Exemplo de Entrada	Exemplo de Saída
5 155 176		2
149
154
172
182
167

Dado de entrada:	Saída esperada:
5 50 250		2
50
250
-10
600
100000000

// a função gets é implementada dentro do sistema para ler as entradas(inputs) dos dados e a função print para imprimir a saída (output) de dados e já pula uma linha ("\n")
// Abaixo segue um exemplo de código que você pode ou não utilizar

var s = gets().split(" ");

//TODO: Complete os espaços em branco com uma possível solução para o desafio

let n   = parseInt(s[0]); // numero de pessoas 5
let min = parseInt(s[1]); // altura mínima     50
let max = parseInt(s[2]); // altura máxima     250

                          // s[0] s[1]  s[2]  s[3]  s[4]  s[5]  s[6]  s[7]  
                         //    5   50    250    50   250   -10   600  100000000
                        
		let altura = 0;
		let conta = 0;
		
		for (let i=0 ; i<n ; i++) {
		  
		  altura = parseInt(s[i+3]);
		               
		if(altura >= min  &&  altura <= max)
			conta++;
		}
		print(conta);











